{"version":3,"file":"DiscussionContainer-317e83fd.js","sources":["../../src/DiscussionContainer/transformToStructuredComments.ts","../../src/DiscussionContainer/DiscussionContainer.tsx"],"sourcesContent":["import type { IComment } from '../CommentItem/types'\n\ntype CommentWithRepliesParent = IComment & {\n  parentCommentId?: string\n}\n\nexport const transformToTree = (comments: CommentWithRepliesParent[]) => {\n  const rootComments: CommentWithRepliesParent[] = []\n  const commentsById: any = {}\n\n  // Traverse the comments and map them to their parent IDs\n  for (const comment of comments) {\n    commentsById[comment._id] = comment\n\n    if (comment.parentCommentId) {\n      const parentComment = commentsById[comment.parentCommentId]\n\n      if (!parentComment) {\n        continue\n      }\n\n      if (!parentComment.replies) {\n        parentComment.replies = []\n      }\n\n      parentComment.replies.push(comment)\n    }\n  }\n\n  // Extract the root comments (those with no parent IDs)\n  for (const comment of comments) {\n    if (!comment.parentCommentId) {\n      rootComments.push(comment)\n    }\n  }\n\n  return rootComments\n}\n","import { useMemo, useState } from 'react'\nimport { Flex } from 'theme-ui'\n\nimport { CommentList } from '../CommentList/CommentList'\nimport { CreateComment } from '../CreateComment/CreateComment'\nimport { DiscussionTitle } from '../DiscussionTitle/DiscussionTitle'\nimport { transformToTree } from './transformToStructuredComments'\n\nimport type { IComment } from '../CommentItem/types'\n\nexport interface IProps {\n  comment: string\n  comments: IComment[]\n  handleDelete: (_id: string) => Promise<void>\n  handleEdit: (_id: string, comment: string) => Promise<void>\n  handleEditRequest: () => Promise<void>\n  highlightedCommentId?: string\n  isLoggedIn: boolean\n  maxLength: number\n  onChange: (comment: string) => void\n  onMoreComments: () => void\n  onSubmit: (comment: string) => void\n  onSubmitReply: (_id: string, reply: string) => Promise<void>\n  supportReplies?: boolean\n}\n\nexport const DiscussionContainer = (props: IProps) => {\n  const {\n    comment,\n    comments,\n    handleDelete,\n    handleEdit,\n    handleEditRequest,\n    onSubmitReply,\n    highlightedCommentId,\n    maxLength,\n    onChange,\n    onMoreComments,\n    onSubmit,\n    isLoggedIn,\n    supportReplies = false,\n  } = props\n\n  const [commentBeingRepliedTo, setCommentBeingRepliedTo] = useState<\n    null | string\n  >(null)\n  const structuredComments = useMemo(\n    () => transformToTree(comments),\n    [comments],\n  )\n\n  const handleSetCommentBeingRepliedTo = (commentId: string | null): void => {\n    if (commentId === commentBeingRepliedTo) {\n      return setCommentBeingRepliedTo(null)\n    }\n    setCommentBeingRepliedTo(commentId)\n  }\n\n  return (\n    <>\n      <DiscussionTitle length={comments.length} />\n\n      <CommentList\n        supportReplies={supportReplies}\n        comments={structuredComments}\n        handleDelete={handleDelete}\n        handleEdit={handleEdit}\n        handleEditRequest={handleEditRequest}\n        highlightedCommentId={highlightedCommentId}\n        isLoggedIn={isLoggedIn}\n        isReplies={false}\n        maxLength={maxLength}\n        onMoreComments={onMoreComments}\n        onSubmitReply={onSubmitReply}\n        setCommentBeingRepliedTo={handleSetCommentBeingRepliedTo}\n      />\n\n      <Flex\n        sx={{\n          alignItems: 'stretch',\n          background: 'softblue',\n          borderRadius: 2,\n          flexDirection: 'column',\n          padding: 3,\n        }}\n      >\n        <CreateComment\n          maxLength={maxLength}\n          comment={comment}\n          onChange={onChange}\n          onSubmit={onSubmit}\n          isLoggedIn={isLoggedIn}\n        />\n      </Flex>\n    </>\n  )\n}\n"],"names":["transformToTree","comments","rootComments","commentsById","comment","parentComment","DiscussionContainer","props","handleDelete","handleEdit","handleEditRequest","onSubmitReply","highlightedCommentId","maxLength","onChange","onMoreComments","onSubmit","isLoggedIn","supportReplies","commentBeingRepliedTo","setCommentBeingRepliedTo","useState","structuredComments","useMemo","handleSetCommentBeingRepliedTo","commentId","jsxs","Fragment","jsx","DiscussionTitle","CommentList","Flex","CreateComment"],"mappings":"ySAMa,MAAAA,EAAmBC,GAAyC,CACvE,MAAMC,EAA2C,CAAA,EAC3CC,EAAoB,CAAA,EAG1B,UAAWC,KAAWH,EAGpB,GAFaE,EAAAC,EAAQ,GAAG,EAAIA,EAExBA,EAAQ,gBAAiB,CACrB,MAAAC,EAAgBF,EAAaC,EAAQ,eAAe,EAE1D,GAAI,CAACC,EACH,SAGGA,EAAc,UACjBA,EAAc,QAAU,IAGZA,EAAA,QAAQ,KAAKD,CAAO,EAKtC,UAAWA,KAAWH,EACfG,EAAQ,iBACXF,EAAa,KAAKE,CAAO,EAItB,OAAAF,CACT,ECXOI,EAAAC,GAAA,CACL,KAAA,CAAM,QAAAH,EACJ,SAAAH,EACA,aAAAO,EACA,WAAAC,EACA,kBAAAC,EACA,cAAAC,EACA,qBAAAC,EACA,UAAAC,EACA,SAAAC,EACA,eAAAC,EACA,SAAAC,EACA,WAAAC,EACA,eAAAC,EAAA,EACiB,EAAAX,EAGnB,CAAAY,EAAAC,CAAA,EAAAC,EAAA,SAAA,IAAA,EAGAC,EAAAC,EAAA,QAA2B,IAAAvB,EAAAC,CAAA,EACK,CAAAA,CAAA,CACrB,EAGXuB,EAAAC,GAAA,CACE,GAAAA,IAAAN,EACE,OAAAC,EAAA,IAAA,EAEFA,EAAAK,CAAA,CAAkC,EAGpC,OAAAC,EAAAC,EAAA,CAAA,SAAA,CAEIC,EAAAC,EAAA,CAAA,OAAA5B,EAAA,MAAA,CAAA,EAA0C2B,EAE1CE,EAAC,CAAA,eAAAZ,EACC,SAAAI,EACU,aAAAd,EACV,WAAAC,EACA,kBAAAC,EACA,qBAAAE,EACA,WAAAK,EACA,UAAA,GACW,UAAAJ,EACX,eAAAE,EACA,cAAAJ,EACA,yBAAAa,CAC0B,CAAA,EAC5BI,EAEAG,EAAC,CAAA,GAAA,CACK,WAAA,UACU,WAAA,WACA,aAAA,EACE,cAAA,SACC,QAAA,CACN,EACX,SAAAH,EAEAI,EAAC,CAAA,UAAAnB,EACC,QAAAT,EACA,SAAAU,EACA,SAAAE,EACA,WAAAC,CACA,CAAA,CACF,CAAA,CACF,CAAA,CAAA,CAGN"}